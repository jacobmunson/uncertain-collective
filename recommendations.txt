
f, ax = plt.subplots(figsize=(10, 5))
ax.plot(range(2, max_K+1), RRI_at_k[1:], 'g-', label='Linear')
avg_precision_at_k, avg_recall_at_k, RRI_at_k, user_is_relevant_at_k, reliability_deviations = func(data, test, wrapper_NMF)
ax.plot(range(2, max_K+1), RRI_at_k[1:], 'r-+', label='NMF')
ax.set_xticks(range(2, max_K+1))
ax.set_xlabel('K', Fontsize=20, labelpad=10)
ax.set_ylabel('RRI@K', Fontsize=20)
ax.legend()
f.tight_layout()
f.savefig(path + 'RRI_at_k.pdf')
'''
reliability_deviations[:, k][reliability_deviations[:, k] != 0]
'''

for r in recommendation:
    if r.iid in test_u_items:
        print(r.iid)



with open(path+'fitted/R.pkl', 'rb') as f:
    R = pickle.load(f)

models = {}
with open(path+'fitted/EMF.pkl', 'rb') as f:
    models['EMF'] = pickle.load(f)

with open(path+'fitted/RMF.pkl', 'rb') as f:
    models['RMF'] = pickle.load(f)

with open(path+'fitted/Linear.pkl', 'rb') as f:
    models['Linear'] = pickle.load(f)

with open(path+'fitted/NMF.pkl', 'rb') as f:
    models['NMF'] = pickle.load(f)

data, test = build_data(name=dataset, test_size=0.2, random_state=0)

R_preds = R.test(test)


print('Fitting heuristic strategic...', end= '')
models['Heuristic'] = Heuristic_reliability(R, u_ratio=u_ratio)


preds = {}
preds['Heuristic'] = models['Heuristic'].test(test)
models['Heuristic'].RPI = RPI(preds['Heuristic'])
print('Fitted with RPI = {}.'.format(models['Heuristic'].RPI))
preds['EMF'] = models['EMF'].test(test)
preds['RMF'] = models['RMF'].test(test)
preds['Linear'] = models['Linear'].test(test)
preds['NMF'] = models['NMF'].test(test)

recommendations = {}
recommendations['Heuristic'] = models['Heuristic'].test_recommend(test, n=20, njobs=2)
recommendations['EMF'] = models['EMF'].test_recommend(test, n=20, njobs=2)
recommendations['RMF'] = models['RMF'].test_recommend(test, n=20, njobs=2)
recommendations['Linear'] = models['Linear'].test_recommend(test, n=20, njobs=2)
recommendations['NMF'] = models['NMF'].test_recommend(test, n=20, njobs=2)
